{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Tyf Copyright Distribution Support this project Buy \u0466 and: [X] Send \u0466 to AUahWfkfr5J4tYakugRbfow7RWVTK35GPW [X] Vote arky on Ark blockchain and earn \u0466 weekly Why this package ? Tyf package provides pythonic way to work with embeded data in TIFF and JPEG images. Documentation The Tyf Project [WIP] Read / write EXIF and IFD data read / edit EXIF data from JPEG images read / edit IFD data from TIFF images read / edit GEOTIFF data from IFD read / edit XMP data from IFD work directly with python numbers, string and datetime interpolate map coordinates using GEOTIFF ModelTransformation Do more with JPEG and TIFF files extract TIFF or JPEG thumbnails from JPEG files strip EXIF data from JPEG File dump EXIF data from JPEG into file dump location thumbnail using any map provider API Quick view >>> import Tyf >>> jpg = Tyf.open(\"test/IMG_20150730_210115.jpg\") >>> jpg.__class__ <class 'Tyf.JpegFile'> >>> print(Tyf.xmp.tostring(jpg.xmp).decode()) <ns0:xmpmeta xmlns:dc=\"http://purl.org/dc/elements/1.1/\" xmlns:ns0=\"adobe:ns:meta/\" xmlns:ns3=\"http://ns.adobe.com/xap/1.0/\" xmlns:ns4=\"http://ns.microsoft.com/photo/1.0/\" xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"><rdf:RDF><rdf:Description rdf:about=\"uuid:faf5bdd5-ba3d-11da-ad31-d33d75182f1b\"><dc:title><rdf:Alt><rdf:li xml:lang=\"x-default\">Beautifull Rainbow</rdf:li></rdf:Alt> </dc:title><dc:description><rdf:Alt><rdf:li xml:lang=\"x-default\">Beautifull Rainbow</rdf:li></rdf:Alt> </dc:description><dc:creator><rdf:Seq><rdf:li>THOORENS Bruno</rdf:li></rdf:Seq> </dc:creator><dc:rights><rdf:Alt><rdf:li xml:lang=\"x-default\">THOORENS Bruno</rdf:li></rdf:Alt> </dc:rights></rdf:Description><rdf:Description rdf:about=\"uuid:faf5bdd5-ba3d-11da-ad31-d33d75182f1b\" /><rdf:Description rdf:about=\"uuid:faf5bdd5-ba3d-11da-ad31-d33d75182f1b\"><ns3:Rating>4</ns3:Rating></rdf:Description><rdf:Description rdf:about=\"uuid:faf5bdd5-ba3d-11da-ad31-d33d75182f1b\"><ns4:Rating>75</ns4:Rating><ns4:LastKeywordXMP><rdf:Bag><rdf:li>Rainbow</rdf:li><rdf:li>Belgium</rdf:li></rdf:Bag> </ns4:LastKeywordXMP></rdf:Description><rdf:Description rdf:about=\"uuid:faf5bdd5-ba3d-11da-ad31-d33d75182f1b\"><dc:subject><rdf:Bag><rdf:li>Rainbow</rdf:li><rdf:li>Belgium</rdf:li></rdf:Bag> </dc:subject></rdf:Description></rdf:RDF></ns0:xmpmeta> >>> jpg.save_thumbnail(\"test/test_thumb\") # extension automatically added There are 3 attributes to access data within Tyf.JpegFile : ifd0 containing picture IFD, EXIF and eventually GPS data ifd1 containing thubnail data xmp containing XMP data ifd0 and ifd1 are shortcut to the first and second IFD in ifd attribute which is itself a Tyf.TiffFile . >>> jpg.ifd[0] == jpg.ifd0 True >>> jpg.ifd[1] == jpg.ifd1 True >>> jpg.ifd.__class__ <class 'Tyf.TiffFile'> >>> jpg.ifd0[256] 2560 >>> jpg.ifd0[\"ImageWidth\"] 2560 >>> jpg.ifd0[256], jpg.ifd0.get(\"ImageWidth\").comment (2560, 'Number of columns in the image, ie, the number of pixels per row') >>> jpg.ifd0[\"GPSLongitude\"] 5.1872093 Tyf.ifd.Ifd class >>> jpg.ifd0.__class__ <class 'Tyf.ifd.Ifd'> >>> for tag in jpg.ifd0.tags(): print(tag) ... <IFD tag ImageWidth:2560> <IFD tag ImageLength:1920> <IFD tag Make:'Google'> <IFD tag Model:'Nexus S'> <IFD tag Orientation:1 - Normal> <IFD tag Software:'KVT49L'> <IFD tag DateTime:datetime.datetime(2015, 7, 30, 21, 1, 16)> <IFD tag Artist:'THOORENS Bruno'> <IFD tag YCbCrPositioning:1 - Centered> <IFD tag Copyright:'THOORENS Bruno'> <IFD tag Exif IFD:2286> <IFD tag GPS IFD:4754> <IFD tag XPTitle:'Beautifull Rainbow'> <IFD tag XPComment:'For testing purpose only !'> <IFD tag XPAuthor:'THOORENS Bruno'> <IFD tag XPKeywords:'Rainbow;Belgium'> <IFD tag ExposureTime:0.008333333333333333> <IFD tag FNumber:2.6> <IFD tag ExposureProgram:3 - Aperture priority> <IFD tag ISOSpeedRatings:50> <IFD tag ExifVersion:b'0220'> <IFD tag DateTimeOriginal:datetime.datetime(2015, 7, 30, 21, 1, 16)> <IFD tag DateTimeDigitized:datetime.datetime(2015, 7, 30, 21, 1, 16)> <IFD tag ShutterSpeedValue:7.0> <IFD tag ApertureValue:3.0> <IFD tag BrightnessValue:6.0> <IFD tag ExposureBiasValue:0.0> <IFD tag MaxApertureValue:3.0> <IFD tag MeteringMode:2 - Center Weighted Average> <IFD tag Flash:0 - Flash did not fire> <IFD tag FocalLength:3.43> <IFD tag ColorSpace:1 - RGB> <IFD tag PixelXDimension:2560> <IFD tag PixelYDimension:1920> <IFD tag ExposureMode:0 - Auto exposure> <IFD tag WhiteBalance:0 - Auto white balance> <IFD tag SceneCaptureType:0 - Standard> <IFD tag GPSVersionID:(2, 2, 0, 0)> <IFD tag GPSLatitudeRef:'N'> <IFD tag GPSLatitude:51.2095416> <IFD tag GPSLongitudeRef:'E'> <IFD tag GPSLongitude:5.1872093> <IFD tag GPSAltitudeRef:0 - Above sea level> <IFD tag GPSAltitude:0.0> <IFD tag GPSTimeStamp:datetime.time(19, 1, 7)> <IFD tag GPSImgDirectionRef:'M'> <IFD tag GPSImgDirection:33.0> <IFD tag GPSProcessingMethod:b'ASCII\\x00\\x00\\x00NETWORK'> <IFD tag GPSDateStamp:datetime.date(2015, 7, 30)> >>> jpg.ifd0.get(\"Orientation\").info 'Normal' >>> jpg.ifd0.get_location() (5.1872093, 51.2095416, -0.0) >>> from Tyf import ifd >>> ifd.dump_mapbox_location(jpg.ifd0, \"test/test_location.png\") >>> jpg.ifd0.set_location(4.362859, 48.958472, 0) >>> ifd.dump_mapbox_location(jpg.ifd0, \"test/test_location2.png\") Contribute Bug report & feedback Use project issues. Add / modify / fix code Guidance words: keep it simple and solid! open a issue to propose your contribution once issue is granted fork this repository edit your contribution start a pull request","title":"Overview"},{"location":"#tyf","text":"","title":"Tyf"},{"location":"#copyright","text":"","title":"Copyright"},{"location":"#distribution","text":"","title":"Distribution"},{"location":"#support-this-project","text":"Buy \u0466 and: [X] Send \u0466 to AUahWfkfr5J4tYakugRbfow7RWVTK35GPW [X] Vote arky on Ark blockchain and earn \u0466 weekly","title":"Support this project"},{"location":"#why-this-package","text":"Tyf package provides pythonic way to work with embeded data in TIFF and JPEG images.","title":"Why this package ?"},{"location":"#documentation","text":"The Tyf Project [WIP]","title":"Documentation"},{"location":"#read-write-exif-and-ifd-data","text":"read / edit EXIF data from JPEG images read / edit IFD data from TIFF images read / edit GEOTIFF data from IFD read / edit XMP data from IFD work directly with python numbers, string and datetime interpolate map coordinates using GEOTIFF ModelTransformation","title":"Read / write EXIF and IFD data"},{"location":"#do-more-with-jpeg-and-tiff-files","text":"extract TIFF or JPEG thumbnails from JPEG files strip EXIF data from JPEG File dump EXIF data from JPEG into file dump location thumbnail using any map provider API","title":"Do more with JPEG and TIFF files"},{"location":"#quick-view","text":">>> import Tyf >>> jpg = Tyf.open(\"test/IMG_20150730_210115.jpg\") >>> jpg.__class__ <class 'Tyf.JpegFile'> >>> print(Tyf.xmp.tostring(jpg.xmp).decode()) <ns0:xmpmeta xmlns:dc=\"http://purl.org/dc/elements/1.1/\" xmlns:ns0=\"adobe:ns:meta/\" xmlns:ns3=\"http://ns.adobe.com/xap/1.0/\" xmlns:ns4=\"http://ns.microsoft.com/photo/1.0/\" xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"><rdf:RDF><rdf:Description rdf:about=\"uuid:faf5bdd5-ba3d-11da-ad31-d33d75182f1b\"><dc:title><rdf:Alt><rdf:li xml:lang=\"x-default\">Beautifull Rainbow</rdf:li></rdf:Alt> </dc:title><dc:description><rdf:Alt><rdf:li xml:lang=\"x-default\">Beautifull Rainbow</rdf:li></rdf:Alt> </dc:description><dc:creator><rdf:Seq><rdf:li>THOORENS Bruno</rdf:li></rdf:Seq> </dc:creator><dc:rights><rdf:Alt><rdf:li xml:lang=\"x-default\">THOORENS Bruno</rdf:li></rdf:Alt> </dc:rights></rdf:Description><rdf:Description rdf:about=\"uuid:faf5bdd5-ba3d-11da-ad31-d33d75182f1b\" /><rdf:Description rdf:about=\"uuid:faf5bdd5-ba3d-11da-ad31-d33d75182f1b\"><ns3:Rating>4</ns3:Rating></rdf:Description><rdf:Description rdf:about=\"uuid:faf5bdd5-ba3d-11da-ad31-d33d75182f1b\"><ns4:Rating>75</ns4:Rating><ns4:LastKeywordXMP><rdf:Bag><rdf:li>Rainbow</rdf:li><rdf:li>Belgium</rdf:li></rdf:Bag> </ns4:LastKeywordXMP></rdf:Description><rdf:Description rdf:about=\"uuid:faf5bdd5-ba3d-11da-ad31-d33d75182f1b\"><dc:subject><rdf:Bag><rdf:li>Rainbow</rdf:li><rdf:li>Belgium</rdf:li></rdf:Bag> </dc:subject></rdf:Description></rdf:RDF></ns0:xmpmeta> >>> jpg.save_thumbnail(\"test/test_thumb\") # extension automatically added There are 3 attributes to access data within Tyf.JpegFile : ifd0 containing picture IFD, EXIF and eventually GPS data ifd1 containing thubnail data xmp containing XMP data ifd0 and ifd1 are shortcut to the first and second IFD in ifd attribute which is itself a Tyf.TiffFile . >>> jpg.ifd[0] == jpg.ifd0 True >>> jpg.ifd[1] == jpg.ifd1 True >>> jpg.ifd.__class__ <class 'Tyf.TiffFile'> >>> jpg.ifd0[256] 2560 >>> jpg.ifd0[\"ImageWidth\"] 2560 >>> jpg.ifd0[256], jpg.ifd0.get(\"ImageWidth\").comment (2560, 'Number of columns in the image, ie, the number of pixels per row') >>> jpg.ifd0[\"GPSLongitude\"] 5.1872093","title":"Quick view"},{"location":"#tyfifdifd-class","text":">>> jpg.ifd0.__class__ <class 'Tyf.ifd.Ifd'> >>> for tag in jpg.ifd0.tags(): print(tag) ... <IFD tag ImageWidth:2560> <IFD tag ImageLength:1920> <IFD tag Make:'Google'> <IFD tag Model:'Nexus S'> <IFD tag Orientation:1 - Normal> <IFD tag Software:'KVT49L'> <IFD tag DateTime:datetime.datetime(2015, 7, 30, 21, 1, 16)> <IFD tag Artist:'THOORENS Bruno'> <IFD tag YCbCrPositioning:1 - Centered> <IFD tag Copyright:'THOORENS Bruno'> <IFD tag Exif IFD:2286> <IFD tag GPS IFD:4754> <IFD tag XPTitle:'Beautifull Rainbow'> <IFD tag XPComment:'For testing purpose only !'> <IFD tag XPAuthor:'THOORENS Bruno'> <IFD tag XPKeywords:'Rainbow;Belgium'> <IFD tag ExposureTime:0.008333333333333333> <IFD tag FNumber:2.6> <IFD tag ExposureProgram:3 - Aperture priority> <IFD tag ISOSpeedRatings:50> <IFD tag ExifVersion:b'0220'> <IFD tag DateTimeOriginal:datetime.datetime(2015, 7, 30, 21, 1, 16)> <IFD tag DateTimeDigitized:datetime.datetime(2015, 7, 30, 21, 1, 16)> <IFD tag ShutterSpeedValue:7.0> <IFD tag ApertureValue:3.0> <IFD tag BrightnessValue:6.0> <IFD tag ExposureBiasValue:0.0> <IFD tag MaxApertureValue:3.0> <IFD tag MeteringMode:2 - Center Weighted Average> <IFD tag Flash:0 - Flash did not fire> <IFD tag FocalLength:3.43> <IFD tag ColorSpace:1 - RGB> <IFD tag PixelXDimension:2560> <IFD tag PixelYDimension:1920> <IFD tag ExposureMode:0 - Auto exposure> <IFD tag WhiteBalance:0 - Auto white balance> <IFD tag SceneCaptureType:0 - Standard> <IFD tag GPSVersionID:(2, 2, 0, 0)> <IFD tag GPSLatitudeRef:'N'> <IFD tag GPSLatitude:51.2095416> <IFD tag GPSLongitudeRef:'E'> <IFD tag GPSLongitude:5.1872093> <IFD tag GPSAltitudeRef:0 - Above sea level> <IFD tag GPSAltitude:0.0> <IFD tag GPSTimeStamp:datetime.time(19, 1, 7)> <IFD tag GPSImgDirectionRef:'M'> <IFD tag GPSImgDirection:33.0> <IFD tag GPSProcessingMethod:b'ASCII\\x00\\x00\\x00NETWORK'> <IFD tag GPSDateStamp:datetime.date(2015, 7, 30)> >>> jpg.ifd0.get(\"Orientation\").info 'Normal' >>> jpg.ifd0.get_location() (5.1872093, 51.2095416, -0.0) >>> from Tyf import ifd >>> ifd.dump_mapbox_location(jpg.ifd0, \"test/test_location.png\") >>> jpg.ifd0.set_location(4.362859, 48.958472, 0) >>> ifd.dump_mapbox_location(jpg.ifd0, \"test/test_location2.png\")","title":"Tyf.ifd.Ifd class"},{"location":"#contribute","text":"","title":"Contribute"},{"location":"#bug-report-feedback","text":"Use project issues.","title":"Bug report &amp; feedback"},{"location":"#add-modify-fix-code","text":"Guidance words: keep it simple and solid! open a issue to propose your contribution once issue is granted fork this repository edit your contribution start a pull request","title":"Add / modify / fix code"},{"location":"api/","text":"Tyf Bibliography Tiff 6.0 spec GeoTiFF 1.8.1 spec JPEG FIF 1.02 Tyf package aims to provide pythonic way to interact with metadata in TIFF and JPEG files. >>> import Tyf open open(f) Return JpegFile or TiffFile according to f . If it is a file object, it is not closed. Arguments : f buffer or string - a valid file path or a python file object TiffFile Objects class TiffFile(list) List of IFD found in TIFF file. >>> tif = Tyf.open(\"test/CEA.tif\") >>> tif[0][\"BitsPerSample\"] <IFD tag BitsPerSample:8> >>> tif[0][\"ModelTiepointTag\"].value (0.0, 0.0, 0.0, -28493.166784412522, 4255884.5438021915, 0.0) >>> tr = tif[0].getModelTransformation() >>> tr(0, 0) (-28493.166784412522, 4255884.5438021915, 0.0, 1.0) >>> tr(tif[0][\"ImageWidth\"], tif[0][\"ImageLength\"]) (2358.211624949061, 4224973.143255847, 0.0, 1.0) gkd shortcut to geokey directories raster_loaded True if raster data loaded save | save(f, byteorder=\"<\", idx=None, ifd1=None) Save object as a TIFF file. If f is a file object, it is not closed. Arguments : f buffer or string - a valid file path or a python file object byteorder string - \">\" if big-endian used else \"<\" idx int - IFD index to save ifd1 Tyf.ifd.Ifd - IFD to be used as thumbnail (only needed with JPEG saving) JpegFile Objects class JpegFile(list) List of JPEG segment tuple (marker, segment) defining the JPEG file. Tyf manage to extract xmd data as python ElementTree object and EXIF data as IFD. ifd0 is a shortcut to JPEF Exif, ifd1 is a shortcut to JPEG Thumbnail and xmp is a shortcut to XMP data. >>> jpg = Tyf.open(\"test/IMG_20150730_210115.jpg\") >>> jpg.ifd0[\"GPS IFD\"] <IFD tag GPS IFD:794> >>> jpg.ifd0.get_location() (5.1872093, 51.2095416, 0.0) >>> jpg.xmp <Element '{adobe:ns:meta/}xmpmeta' at 0x000001CA40C7C4A0> ifd0 shortcut to JPEG EXIF data ifd1 shortcut to JPEG thumbnail __init__ | __init__(fileobj) Arguments : fileobj - a python file object __getitem__ | __getitem__(item) Return item from ifd0 . >>> jpg[\"GPSLongitude\"] <IFD tag GPSLongitude:5.1872093> get | get(item, default=None) Return item from ifd1 . >>> jpg.get(\"ImageWidth\") <IFD tag ImageWidth:320> save | save(f) Save object as a JPEG file. All segmet are writed in current order, only ifd0 , ifd1 and xmp are recomputed. If f is a file object, it is not closed. Arguments : f buffer or string - a valid file path or a python file object save_thumbnail | save_thumbnail(f) Save JPEG thumbnail in a separated TIFF or JPEG file, file extention automatically appended. If f is a file object, it is not closed. Arguments : f buffer or string - a valid file path or a python file object dump_exif | dump_exif(f) Save EXIF data in a separated file. If f is a file object, it is not closed. Arguments : f buffer or string - a valid file path or a python file object strip_exif | strip_exif() Remove EXIF from JPEG, keeping XMP segment untouched.","title":"API"},{"location":"api/#tyf","text":"Bibliography Tiff 6.0 spec GeoTiFF 1.8.1 spec JPEG FIF 1.02 Tyf package aims to provide pythonic way to interact with metadata in TIFF and JPEG files. >>> import Tyf","title":"Tyf"},{"location":"api/#open","text":"open(f) Return JpegFile or TiffFile according to f . If it is a file object, it is not closed. Arguments : f buffer or string - a valid file path or a python file object","title":"open"},{"location":"api/#tifffile-objects","text":"class TiffFile(list) List of IFD found in TIFF file. >>> tif = Tyf.open(\"test/CEA.tif\") >>> tif[0][\"BitsPerSample\"] <IFD tag BitsPerSample:8> >>> tif[0][\"ModelTiepointTag\"].value (0.0, 0.0, 0.0, -28493.166784412522, 4255884.5438021915, 0.0) >>> tr = tif[0].getModelTransformation() >>> tr(0, 0) (-28493.166784412522, 4255884.5438021915, 0.0, 1.0) >>> tr(tif[0][\"ImageWidth\"], tif[0][\"ImageLength\"]) (2358.211624949061, 4224973.143255847, 0.0, 1.0)","title":"TiffFile Objects"},{"location":"api/#gkd","text":"shortcut to geokey directories","title":"gkd"},{"location":"api/#raster_loaded","text":"True if raster data loaded","title":"raster_loaded"},{"location":"api/#save","text":"| save(f, byteorder=\"<\", idx=None, ifd1=None) Save object as a TIFF file. If f is a file object, it is not closed. Arguments : f buffer or string - a valid file path or a python file object byteorder string - \">\" if big-endian used else \"<\" idx int - IFD index to save ifd1 Tyf.ifd.Ifd - IFD to be used as thumbnail (only needed with JPEG saving)","title":"save"},{"location":"api/#jpegfile-objects","text":"class JpegFile(list) List of JPEG segment tuple (marker, segment) defining the JPEG file. Tyf manage to extract xmd data as python ElementTree object and EXIF data as IFD. ifd0 is a shortcut to JPEF Exif, ifd1 is a shortcut to JPEG Thumbnail and xmp is a shortcut to XMP data. >>> jpg = Tyf.open(\"test/IMG_20150730_210115.jpg\") >>> jpg.ifd0[\"GPS IFD\"] <IFD tag GPS IFD:794> >>> jpg.ifd0.get_location() (5.1872093, 51.2095416, 0.0) >>> jpg.xmp <Element '{adobe:ns:meta/}xmpmeta' at 0x000001CA40C7C4A0>","title":"JpegFile Objects"},{"location":"api/#ifd0","text":"shortcut to JPEG EXIF data","title":"ifd0"},{"location":"api/#ifd1","text":"shortcut to JPEG thumbnail","title":"ifd1"},{"location":"api/#__init__","text":"| __init__(fileobj) Arguments : fileobj - a python file object","title":"__init__"},{"location":"api/#__getitem__","text":"| __getitem__(item) Return item from ifd0 . >>> jpg[\"GPSLongitude\"] <IFD tag GPSLongitude:5.1872093>","title":"__getitem__"},{"location":"api/#get","text":"| get(item, default=None) Return item from ifd1 . >>> jpg.get(\"ImageWidth\") <IFD tag ImageWidth:320>","title":"get"},{"location":"api/#save_1","text":"| save(f) Save object as a JPEG file. All segmet are writed in current order, only ifd0 , ifd1 and xmp are recomputed. If f is a file object, it is not closed. Arguments : f buffer or string - a valid file path or a python file object","title":"save"},{"location":"api/#save_thumbnail","text":"| save_thumbnail(f) Save JPEG thumbnail in a separated TIFF or JPEG file, file extention automatically appended. If f is a file object, it is not closed. Arguments : f buffer or string - a valid file path or a python file object","title":"save_thumbnail"},{"location":"api/#dump_exif","text":"| dump_exif(f) Save EXIF data in a separated file. If f is a file object, it is not closed. Arguments : f buffer or string - a valid file path or a python file object","title":"dump_exif"},{"location":"api/#strip_exif","text":"| strip_exif() Remove EXIF from JPEG, keeping XMP segment untouched.","title":"strip_exif"},{"location":"core/","text":"Tyf.gkd Tyf.ifd GeoKeyModel Mapping of named tuple to be used with geotiff ModelPixelScaleTag , ModelTiepointTag and ModelTransformationTag . >>> import tyf >>> from Tyf import ifd >>> tif = Tyf.open(\"test/CEA.tif\") >>> ifd.GeoKeyModel[\"ModelTiepointTag\"](*tif[0].tiepoints[0]) ModelTiepoint(I=0.0, J=0.0, K=0.0, X=-28493.1667844, Y=4255884.54380, Z=0.0) >>> ifd.GeoKeyModel[\"ModelPixelScaleTag\"](*tif[0][\"ModelPixelScaleTag\"]) ModelPixelScale(ScaleX=60.022136983193, ScaleY=60.022136983193, ScaleZ=0.0) Transform Transform(obj, x=0., y=0., z=0.) Transformation between raster and model space using a model transformation matrix applied to raster coordinates plus altitude. >>> mps = ifd.GeoKeyModel[\"ModelPixelScaleTag\"] >>> mtt = ifd.GeoKeyModel[\"ModelTiepointTag\"] >>> Sx, Sy, Sz = mps(*tif[0][\"ModelPixelScaleTag\"]) >>> I, J, K, X, Y, Z = mtt(*tif[0].tiepoints[0]) >>> matrix = ifd.GeoKeyModel[\"ModelTransformationTag\"]( ... Sx, 0., 0., X - I * Sx, ... 0., -Sy, 0., Y + J * Sy, ... 0., 0., Sz, Z - K * Sz, ... 0., 0., 0., 1. ... ) >>> ifd.Transform(matrix, 10, 10) (-27892.945414580587, 4255284.32243236, 0.0) Arguments : obj GeoKeyModel[\"ModelTransformationTag\"] - transformation matrix x float - pixel column index from left y float - pixel row index from top z float - altitude value Returns : projeted coordinates X, Y, Z Tag Objects class Tag(object) value Encode and decode on the fly the _v attribute (see Tyf.encoders and Tyf.decoders modules). >>> tag = ifd.Tag(\"GPSLongitude\") >>> tag.value = 5.62347 >>> tag._v (5, 1, 37, 1, 6123, 250) # 5/1 deg + 37/1 min + 6123/250 sec >>> tag.value 5.62347 info Meaning of tag value if any (see Tyf.values module). >>> ifd.Tag(\"PhotometricInterpretation\", value=3).info 'RGB Palette' >>> ifd.Tag(\"Flash\", value=0x000F).info 'Flash fired, compulsory flash mode, return light detected' __init__ | __init__(tag_or_key, value=None) Arguments : tag_or_key int or string - tag value or keyword value any - value of the tag. If None is given, it is set to default value if anyone is defined else _v attribute is not created. read | @staticmethod | read(fileobj, byteorder, db=None) Extract an IFD tag from buffer current position. Buffer position is adjusted to the end of IFD entry before returning the value. Arguments : fileobj buffer - a python file object byteorder string - \">\" if big-endian used else \"<\" db dict - authorized tag database Returns : Tyf.ifd.Tag calcsize | calcsize() Return tag value size in bytes when packed. pack | pack(byteorder) Return a tuple containing packed IFD base entry [tag, type, count], packed value and the info if value have to be written in IFD entry or data. >>> ttc, val, ofs = ifd.Tag(\"GPSLongitude\", value=5.62347).pack(\">\") >>> ttc.hex() '0004000500000003' >>> val.hex() '00000005000000010000002500000001000017eb000000fa' >>> # 5, 1, 37, 1, 6123, 250 >>> # 5/1 deg + 37/1 min + 6123/250 sec >>> ofs True Arguments : byteorder string - \">\" if big-endian used else \"<\" Returns : (packed ifd entry - packed value - is offset boolean) getModelTiePoints getModelTiePoints(cls) Return tiepoint list found in ModelTiepointTag tags. This function sets a list of all points in private attribute _model_tiepoints on first call. ModelTiepointTag = (I1, J1, K1, X1, Y1, Z1, ...In, Jn, Kn, Xn, Yn, Zn) _model_tiepoints = [(I1, J1, K1, X1, Y1, Z1), ...(In, Jn, Kn, Xn, Yn, Zn)] Arguments : cls dict or Tyf.ifd.Ifd - image file directory Returns : Tiepoint list Raises : KeyError if no ModelTiepointTag defined Ifd Objects class Ifd(dict) Provide a very similar python dict interface to create and store IFD tags with automatic sub IFD management. exfT , gpsT and itrT are Tyf.ifd.Ifd attributes (sub IFD) for Exif, GPS and Interoperability tags. >>> i = ifd.Ifd() >>> i[\"GPSLongitude\"] = 5.62347 # --> GPS IFD >>> i[\"FlashpixVersion\"] = None # None will set default value --> Exif IFD >>> i {} >>> i.gpsT {'GPSLongitude': <IFD tag GPSLongitude:5.62347>} >>> i.exfT {'FlashpixVersion': <IFD tag FlashpixVersion:b'0100'>} >>> i.get(\"GPSLongitude\") # get method returns tag object <IFD tag GPSLongitude:5.62347> >>> i[\"GPSLongitude\"] # __getitem__ interface returns the python value 5.62347 >>> i.pop(\"FlashpixVersion\") # delete \"FlashpixVersion\" tag <IFD tag FlashpixVersion:b'0100'> >>> hasattr(i, \"exfT\") # empty exfT sub IFD attribute removed False raster_loaded True if raster is loaded tiepoints Geotiff tiepoint list tags | tags() Return iterator over all IFD values including sub IFD ones in the order: exfT - gpsT - itrT . set_location | set_location(lon, lat, alt=0.) Set GPS IFD tags according to given longitude, latitude nd altitude. If no GPS IFD exists, it is created according to version (2, 2, 0, 0) . >>> i = ifd.Ifd() >>> i.set_location(5.62347, 45.21345, 12) >>> for t in i: print(t) ... <IFD tag GPSVersionID:(2, 2, 0, 0)> <IFD tag GPSLatitudeRef:'N'> <IFD tag GPSLatitude:45.21345> <IFD tag GPSLongitudeRef:'E'> <IFD tag GPSLongitude:5.62347> <IFD tag GPSAltitudeRef:0 - Above sea level> <IFD tag GPSAltitude:12.0> Arguments : lon float - longitude in decimal degrees lat float - latitude in decimal degrees alt float - altitude in meters get_location | get_location() >>> i = ifd.Ifd() >>> i.get_location() Traceback (most recent call last): File \"<stdin>\", line 1, in <module> File \"X:/path/to/Tyf/ifd.py\", line 568, in get_location raise Exception(\"No location data found\") Exception: No location data found >>> i.set_location(5.62347, 45.21345, 12) >>> i.get_location() (5.62347, 45.21345, 12.0) Returns : longitude - latitude - altitude tuple Raises : Exception if no GPS IFD found","title":"Core"},{"location":"core/#tyfgkd","text":"","title":"Tyf.gkd"},{"location":"core/#tyfifd","text":"","title":"Tyf.ifd"},{"location":"core/#geokeymodel","text":"Mapping of named tuple to be used with geotiff ModelPixelScaleTag , ModelTiepointTag and ModelTransformationTag . >>> import tyf >>> from Tyf import ifd >>> tif = Tyf.open(\"test/CEA.tif\") >>> ifd.GeoKeyModel[\"ModelTiepointTag\"](*tif[0].tiepoints[0]) ModelTiepoint(I=0.0, J=0.0, K=0.0, X=-28493.1667844, Y=4255884.54380, Z=0.0) >>> ifd.GeoKeyModel[\"ModelPixelScaleTag\"](*tif[0][\"ModelPixelScaleTag\"]) ModelPixelScale(ScaleX=60.022136983193, ScaleY=60.022136983193, ScaleZ=0.0)","title":"GeoKeyModel"},{"location":"core/#transform","text":"Transform(obj, x=0., y=0., z=0.) Transformation between raster and model space using a model transformation matrix applied to raster coordinates plus altitude. >>> mps = ifd.GeoKeyModel[\"ModelPixelScaleTag\"] >>> mtt = ifd.GeoKeyModel[\"ModelTiepointTag\"] >>> Sx, Sy, Sz = mps(*tif[0][\"ModelPixelScaleTag\"]) >>> I, J, K, X, Y, Z = mtt(*tif[0].tiepoints[0]) >>> matrix = ifd.GeoKeyModel[\"ModelTransformationTag\"]( ... Sx, 0., 0., X - I * Sx, ... 0., -Sy, 0., Y + J * Sy, ... 0., 0., Sz, Z - K * Sz, ... 0., 0., 0., 1. ... ) >>> ifd.Transform(matrix, 10, 10) (-27892.945414580587, 4255284.32243236, 0.0) Arguments : obj GeoKeyModel[\"ModelTransformationTag\"] - transformation matrix x float - pixel column index from left y float - pixel row index from top z float - altitude value Returns : projeted coordinates X, Y, Z","title":"Transform"},{"location":"core/#tag-objects","text":"class Tag(object)","title":"Tag Objects"},{"location":"core/#value","text":"Encode and decode on the fly the _v attribute (see Tyf.encoders and Tyf.decoders modules). >>> tag = ifd.Tag(\"GPSLongitude\") >>> tag.value = 5.62347 >>> tag._v (5, 1, 37, 1, 6123, 250) # 5/1 deg + 37/1 min + 6123/250 sec >>> tag.value 5.62347","title":"value"},{"location":"core/#info","text":"Meaning of tag value if any (see Tyf.values module). >>> ifd.Tag(\"PhotometricInterpretation\", value=3).info 'RGB Palette' >>> ifd.Tag(\"Flash\", value=0x000F).info 'Flash fired, compulsory flash mode, return light detected'","title":"info"},{"location":"core/#__init__","text":"| __init__(tag_or_key, value=None) Arguments : tag_or_key int or string - tag value or keyword value any - value of the tag. If None is given, it is set to default value if anyone is defined else _v attribute is not created.","title":"__init__"},{"location":"core/#read","text":"| @staticmethod | read(fileobj, byteorder, db=None) Extract an IFD tag from buffer current position. Buffer position is adjusted to the end of IFD entry before returning the value. Arguments : fileobj buffer - a python file object byteorder string - \">\" if big-endian used else \"<\" db dict - authorized tag database Returns : Tyf.ifd.Tag","title":"read"},{"location":"core/#calcsize","text":"| calcsize() Return tag value size in bytes when packed.","title":"calcsize"},{"location":"core/#pack","text":"| pack(byteorder) Return a tuple containing packed IFD base entry [tag, type, count], packed value and the info if value have to be written in IFD entry or data. >>> ttc, val, ofs = ifd.Tag(\"GPSLongitude\", value=5.62347).pack(\">\") >>> ttc.hex() '0004000500000003' >>> val.hex() '00000005000000010000002500000001000017eb000000fa' >>> # 5, 1, 37, 1, 6123, 250 >>> # 5/1 deg + 37/1 min + 6123/250 sec >>> ofs True Arguments : byteorder string - \">\" if big-endian used else \"<\" Returns : (packed ifd entry - packed value - is offset boolean)","title":"pack"},{"location":"core/#getmodeltiepoints","text":"getModelTiePoints(cls) Return tiepoint list found in ModelTiepointTag tags. This function sets a list of all points in private attribute _model_tiepoints on first call. ModelTiepointTag = (I1, J1, K1, X1, Y1, Z1, ...In, Jn, Kn, Xn, Yn, Zn) _model_tiepoints = [(I1, J1, K1, X1, Y1, Z1), ...(In, Jn, Kn, Xn, Yn, Zn)] Arguments : cls dict or Tyf.ifd.Ifd - image file directory Returns : Tiepoint list Raises : KeyError if no ModelTiepointTag defined","title":"getModelTiePoints"},{"location":"core/#ifd-objects","text":"class Ifd(dict) Provide a very similar python dict interface to create and store IFD tags with automatic sub IFD management. exfT , gpsT and itrT are Tyf.ifd.Ifd attributes (sub IFD) for Exif, GPS and Interoperability tags. >>> i = ifd.Ifd() >>> i[\"GPSLongitude\"] = 5.62347 # --> GPS IFD >>> i[\"FlashpixVersion\"] = None # None will set default value --> Exif IFD >>> i {} >>> i.gpsT {'GPSLongitude': <IFD tag GPSLongitude:5.62347>} >>> i.exfT {'FlashpixVersion': <IFD tag FlashpixVersion:b'0100'>} >>> i.get(\"GPSLongitude\") # get method returns tag object <IFD tag GPSLongitude:5.62347> >>> i[\"GPSLongitude\"] # __getitem__ interface returns the python value 5.62347 >>> i.pop(\"FlashpixVersion\") # delete \"FlashpixVersion\" tag <IFD tag FlashpixVersion:b'0100'> >>> hasattr(i, \"exfT\") # empty exfT sub IFD attribute removed False","title":"Ifd Objects"},{"location":"core/#raster_loaded","text":"True if raster is loaded","title":"raster_loaded"},{"location":"core/#tiepoints","text":"Geotiff tiepoint list","title":"tiepoints"},{"location":"core/#tags","text":"| tags() Return iterator over all IFD values including sub IFD ones in the order: exfT - gpsT - itrT .","title":"tags"},{"location":"core/#set_location","text":"| set_location(lon, lat, alt=0.) Set GPS IFD tags according to given longitude, latitude nd altitude. If no GPS IFD exists, it is created according to version (2, 2, 0, 0) . >>> i = ifd.Ifd() >>> i.set_location(5.62347, 45.21345, 12) >>> for t in i: print(t) ... <IFD tag GPSVersionID:(2, 2, 0, 0)> <IFD tag GPSLatitudeRef:'N'> <IFD tag GPSLatitude:45.21345> <IFD tag GPSLongitudeRef:'E'> <IFD tag GPSLongitude:5.62347> <IFD tag GPSAltitudeRef:0 - Above sea level> <IFD tag GPSAltitude:12.0> Arguments : lon float - longitude in decimal degrees lat float - latitude in decimal degrees alt float - altitude in meters","title":"set_location"},{"location":"core/#get_location","text":"| get_location() >>> i = ifd.Ifd() >>> i.get_location() Traceback (most recent call last): File \"<stdin>\", line 1, in <module> File \"X:/path/to/Tyf/ifd.py\", line 568, in get_location raise Exception(\"No location data found\") Exception: No location data found >>> i.set_location(5.62347, 45.21345, 12) >>> i.get_location() (5.62347, 45.21345, 12.0) Returns : longitude - latitude - altitude tuple Raises : Exception if no GPS IFD found","title":"get_location"},{"location":"extend/","text":"Tyf.decoders Tyf.decoders module defines simple definition to translate unpacked ifd tag value to python one. Tyf.encoders","title":"Extend"},{"location":"extend/#tyfdecoders","text":"Tyf.decoders module defines simple definition to translate unpacked ifd tag value to python one.","title":"Tyf.decoders"},{"location":"extend/#tyfencoders","text":"","title":"Tyf.encoders"}]}