{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Tyf Support this project Why this package ? Tyf package provides pythonic way to work with embeded data in TIFF and JPEG images. Documentation The Tyf Project [WIP] Read / write EXIF and IFD data read / edit EXIF and XMP data from JPEG images read / edit IFD and XMP data from TIFF images read / edit / use GEOTIFF data from IFD work directly with python types Do more with JPEG and TIFF files extract TIFF or JPEG thumbnails from JPEG files dump EXIF data from JPEG into file dump location thumbnail using any map provider API Quick view >>> import Tyf >>> tif = Tyf.open(\"test/CEA.tif\") >>> tif.__class__ <class 'Tyf.TiffFile'> >>> for key in tif.gkd[0]: print(key) ... <GKD tag GTModelTypeGeoKey:(1,) - Projection Coordinate System> <GKD tag GTRasterTypeGeoKey:(1,) - Raster pixel is area> <GKD tag GTCitationGeoKey:b'unnamed'> <GKD tag GeographicTypeGeoKey:(4267,) - NAD27> <GKD tag GeogCitationGeoKey:b'NAD27'> <GKD tag GeogAngularUnitsGeoKey:(9102,) - degree> <GKD tag ProjectedCSTypeGeoKey:(32767,) - User-defined> <GKD tag ProjectionGeoKey:(32767,) - User-defined> <GKD tag ProjCoordTransGeoKey:(28,) - User-defined> <GKD tag ProjLinearUnitsGeoKey:(9001,) - metre> <GKD tag ProjStdParallel1GeoKey:(33.75,)> <GKD tag ProjNatOriginLongGeoKey:(-117.333333333333,)> <GKD tag ProjFalseEastingGeoKey:(0.0,)> <GKD tag ProjFalseNorthingGeoKey:(0.0,)> >>> tr = tif[0].getModelTransformation() >>> tr(tif[0][\"ImageWidth\"]/2, tif[0][\"ImageLength\"]/2) (-13067.47757973173, 4240428.8435290195, 0.0) >>> jpg = Tyf.open(\"test/IMG_20150730_210115.jpg\") unknown tag 18246 type [7]: <IFD tag Undefined:4> ignored unknown tag 18249 type [7]: <IFD tag Undefined:75> ignored >>> jpg.__class__ <class 'Tyf.JpegFile'> >>> jpg[\"XPComment\"] <IFD tag XPComment:'For testing purpose only !'> >>> jpg.xmp <Element '{adobe:ns:meta/}xmpmeta' at 0x000001D6A2404130> >>> jpg.get_xmp(\"Rating\", ns=\"ADOBE\").text '4' >>> jpg.set_xmp(\"UserComment\", \"Simple comment\") <Element '{http://ns.adobe.com/exif/1.0/}UserComment' at 0x000001D6A24062F0> >>> jpg.get_xmp(\"UserComment\").text 'Simple comment' >>> jpg.save_thumbnail(\"test/test_thumb\") # extension automatically added There are 3 attributes to access data within Tyf.JpegFile : ifd0 containing picture IFD, EXIF and eventually GPS data ifd1 containing thubnail data xmp containing XMP data ifd0 and ifd1 are shortcut to the first and second IFD in ifd attribute which is itself a Tyf.TiffFile . >>> jpg.ifd[0] == jpg.ifd0 True >>> jpg.ifd[1] == jpg.ifd1 True >>> jpg.ifd.__class__ <class 'Tyf.TiffFile'> >>> jpg.ifd0[256] 2560 >>> jpg.ifd0[\"ImageWidth\"] 2560 >>> jpg.ifd0[256], jpg.ifd0.get(\"ImageWidth\").comment (2560, 'Number of columns in the image, ie, the number of pixels per row') >>> jpg.ifd0[\"GPSLongitude\"] 5.1872093 Tyf.ifd.Ifd class >>> jpg.ifd0.__class__ <class 'Tyf.ifd.Ifd'> >>> for tag in jpg.ifd0.tags(): print(tag) ... <IFD tag ImageWidth:2560> <IFD tag ImageLength:1920> <IFD tag Make:'Google'> <IFD tag Model:'Nexus S'> <IFD tag Orientation:1 - Normal> <IFD tag Software:'KVT49L'> <IFD tag DateTime:datetime.datetime(2015, 7, 30, 21, 1, 16)> <IFD tag Artist:'THOORENS Bruno'> <IFD tag YCbCrPositioning:1 - Centered> <IFD tag Copyright:'THOORENS Bruno'> <IFD tag Exif IFD:2286> <IFD tag GPS IFD:4754> <IFD tag XPTitle:'Beautifull Rainbow'> <IFD tag XPComment:'For testing purpose only !'> <IFD tag XPAuthor:'THOORENS Bruno'> <IFD tag XPKeywords:'Rainbow;Belgium'> <IFD tag ExposureTime:0.008333333333333333> <IFD tag FNumber:2.6> <IFD tag ExposureProgram:3 - Aperture priority> <IFD tag ISOSpeedRatings:50> <IFD tag ExifVersion:b'0220'> <IFD tag DateTimeOriginal:datetime.datetime(2015, 7, 30, 21, 1, 16)> <IFD tag DateTimeDigitized:datetime.datetime(2015, 7, 30, 21, 1, 16)> <IFD tag ShutterSpeedValue:7.0> <IFD tag ApertureValue:3.0> <IFD tag BrightnessValue:6.0> <IFD tag ExposureBiasValue:0.0> <IFD tag MaxApertureValue:3.0> <IFD tag MeteringMode:2 - Center Weighted Average> <IFD tag Flash:0 - Flash did not fire> <IFD tag FocalLength:3.43> <IFD tag ColorSpace:1 - RGB> <IFD tag PixelXDimension:2560> <IFD tag PixelYDimension:1920> <IFD tag ExposureMode:0 - Auto exposure> <IFD tag WhiteBalance:0 - Auto white balance> <IFD tag SceneCaptureType:0 - Standard> <IFD tag GPSVersionID:(2, 2, 0, 0)> <IFD tag GPSLatitudeRef:'N'> <IFD tag GPSLatitude:51.2095416> <IFD tag GPSLongitudeRef:'E'> <IFD tag GPSLongitude:5.1872093> <IFD tag GPSAltitudeRef:0 - Above sea level> <IFD tag GPSAltitude:0.0> <IFD tag GPSTimeStamp:datetime.time(19, 1, 7)> <IFD tag GPSImgDirectionRef:'M'> <IFD tag GPSImgDirection:33.0> <IFD tag GPSProcessingMethod:b'ASCII\\x00\\x00\\x00NETWORK'> <IFD tag GPSDateStamp:datetime.date(2015, 7, 30)> >>> jpg.ifd0.get(\"Orientation\").info 'Normal' >>> jpg.ifd0.get_location() (5.1872093, 51.2095416, -0.0) >>> from Tyf import ifd >>> ifd.dump_mapbox_location(jpg.ifd0, \"test/test_location.png\") >>> jpg.ifd0.set_location(4.362859, 48.958472, 0) >>> ifd.dump_mapbox_location(jpg.ifd0, \"test/test_location2.png\") Contribute Bug report & feedback Use project issues. Add / modify / fix code Guidance words: keep it simple and solid! open a issue to propose your contribution once issue is granted fork this repository edit your contribution start a pull request","title":"Overview"},{"location":"#tyf","text":"","title":"Tyf"},{"location":"#support-this-project","text":"","title":"Support this project"},{"location":"#why-this-package","text":"Tyf package provides pythonic way to work with embeded data in TIFF and JPEG images.","title":"Why this package ?"},{"location":"#documentation","text":"The Tyf Project [WIP]","title":"Documentation"},{"location":"#read-write-exif-and-ifd-data","text":"read / edit EXIF and XMP data from JPEG images read / edit IFD and XMP data from TIFF images read / edit / use GEOTIFF data from IFD work directly with python types","title":"Read / write EXIF and IFD data"},{"location":"#do-more-with-jpeg-and-tiff-files","text":"extract TIFF or JPEG thumbnails from JPEG files dump EXIF data from JPEG into file dump location thumbnail using any map provider API","title":"Do more with JPEG and TIFF files"},{"location":"#quick-view","text":">>> import Tyf >>> tif = Tyf.open(\"test/CEA.tif\") >>> tif.__class__ <class 'Tyf.TiffFile'> >>> for key in tif.gkd[0]: print(key) ... <GKD tag GTModelTypeGeoKey:(1,) - Projection Coordinate System> <GKD tag GTRasterTypeGeoKey:(1,) - Raster pixel is area> <GKD tag GTCitationGeoKey:b'unnamed'> <GKD tag GeographicTypeGeoKey:(4267,) - NAD27> <GKD tag GeogCitationGeoKey:b'NAD27'> <GKD tag GeogAngularUnitsGeoKey:(9102,) - degree> <GKD tag ProjectedCSTypeGeoKey:(32767,) - User-defined> <GKD tag ProjectionGeoKey:(32767,) - User-defined> <GKD tag ProjCoordTransGeoKey:(28,) - User-defined> <GKD tag ProjLinearUnitsGeoKey:(9001,) - metre> <GKD tag ProjStdParallel1GeoKey:(33.75,)> <GKD tag ProjNatOriginLongGeoKey:(-117.333333333333,)> <GKD tag ProjFalseEastingGeoKey:(0.0,)> <GKD tag ProjFalseNorthingGeoKey:(0.0,)> >>> tr = tif[0].getModelTransformation() >>> tr(tif[0][\"ImageWidth\"]/2, tif[0][\"ImageLength\"]/2) (-13067.47757973173, 4240428.8435290195, 0.0) >>> jpg = Tyf.open(\"test/IMG_20150730_210115.jpg\") unknown tag 18246 type [7]: <IFD tag Undefined:4> ignored unknown tag 18249 type [7]: <IFD tag Undefined:75> ignored >>> jpg.__class__ <class 'Tyf.JpegFile'> >>> jpg[\"XPComment\"] <IFD tag XPComment:'For testing purpose only !'> >>> jpg.xmp <Element '{adobe:ns:meta/}xmpmeta' at 0x000001D6A2404130> >>> jpg.get_xmp(\"Rating\", ns=\"ADOBE\").text '4' >>> jpg.set_xmp(\"UserComment\", \"Simple comment\") <Element '{http://ns.adobe.com/exif/1.0/}UserComment' at 0x000001D6A24062F0> >>> jpg.get_xmp(\"UserComment\").text 'Simple comment' >>> jpg.save_thumbnail(\"test/test_thumb\") # extension automatically added There are 3 attributes to access data within Tyf.JpegFile : ifd0 containing picture IFD, EXIF and eventually GPS data ifd1 containing thubnail data xmp containing XMP data ifd0 and ifd1 are shortcut to the first and second IFD in ifd attribute which is itself a Tyf.TiffFile . >>> jpg.ifd[0] == jpg.ifd0 True >>> jpg.ifd[1] == jpg.ifd1 True >>> jpg.ifd.__class__ <class 'Tyf.TiffFile'> >>> jpg.ifd0[256] 2560 >>> jpg.ifd0[\"ImageWidth\"] 2560 >>> jpg.ifd0[256], jpg.ifd0.get(\"ImageWidth\").comment (2560, 'Number of columns in the image, ie, the number of pixels per row') >>> jpg.ifd0[\"GPSLongitude\"] 5.1872093","title":"Quick view"},{"location":"#tyfifdifd-class","text":">>> jpg.ifd0.__class__ <class 'Tyf.ifd.Ifd'> >>> for tag in jpg.ifd0.tags(): print(tag) ... <IFD tag ImageWidth:2560> <IFD tag ImageLength:1920> <IFD tag Make:'Google'> <IFD tag Model:'Nexus S'> <IFD tag Orientation:1 - Normal> <IFD tag Software:'KVT49L'> <IFD tag DateTime:datetime.datetime(2015, 7, 30, 21, 1, 16)> <IFD tag Artist:'THOORENS Bruno'> <IFD tag YCbCrPositioning:1 - Centered> <IFD tag Copyright:'THOORENS Bruno'> <IFD tag Exif IFD:2286> <IFD tag GPS IFD:4754> <IFD tag XPTitle:'Beautifull Rainbow'> <IFD tag XPComment:'For testing purpose only !'> <IFD tag XPAuthor:'THOORENS Bruno'> <IFD tag XPKeywords:'Rainbow;Belgium'> <IFD tag ExposureTime:0.008333333333333333> <IFD tag FNumber:2.6> <IFD tag ExposureProgram:3 - Aperture priority> <IFD tag ISOSpeedRatings:50> <IFD tag ExifVersion:b'0220'> <IFD tag DateTimeOriginal:datetime.datetime(2015, 7, 30, 21, 1, 16)> <IFD tag DateTimeDigitized:datetime.datetime(2015, 7, 30, 21, 1, 16)> <IFD tag ShutterSpeedValue:7.0> <IFD tag ApertureValue:3.0> <IFD tag BrightnessValue:6.0> <IFD tag ExposureBiasValue:0.0> <IFD tag MaxApertureValue:3.0> <IFD tag MeteringMode:2 - Center Weighted Average> <IFD tag Flash:0 - Flash did not fire> <IFD tag FocalLength:3.43> <IFD tag ColorSpace:1 - RGB> <IFD tag PixelXDimension:2560> <IFD tag PixelYDimension:1920> <IFD tag ExposureMode:0 - Auto exposure> <IFD tag WhiteBalance:0 - Auto white balance> <IFD tag SceneCaptureType:0 - Standard> <IFD tag GPSVersionID:(2, 2, 0, 0)> <IFD tag GPSLatitudeRef:'N'> <IFD tag GPSLatitude:51.2095416> <IFD tag GPSLongitudeRef:'E'> <IFD tag GPSLongitude:5.1872093> <IFD tag GPSAltitudeRef:0 - Above sea level> <IFD tag GPSAltitude:0.0> <IFD tag GPSTimeStamp:datetime.time(19, 1, 7)> <IFD tag GPSImgDirectionRef:'M'> <IFD tag GPSImgDirection:33.0> <IFD tag GPSProcessingMethod:b'ASCII\\x00\\x00\\x00NETWORK'> <IFD tag GPSDateStamp:datetime.date(2015, 7, 30)> >>> jpg.ifd0.get(\"Orientation\").info 'Normal' >>> jpg.ifd0.get_location() (5.1872093, 51.2095416, -0.0) >>> from Tyf import ifd >>> ifd.dump_mapbox_location(jpg.ifd0, \"test/test_location.png\") >>> jpg.ifd0.set_location(4.362859, 48.958472, 0) >>> ifd.dump_mapbox_location(jpg.ifd0, \"test/test_location2.png\")","title":"Tyf.ifd.Ifd class"},{"location":"#contribute","text":"","title":"Contribute"},{"location":"#bug-report-feedback","text":"Use project issues.","title":"Bug report &amp; feedback"},{"location":"#add-modify-fix-code","text":"Guidance words: keep it simple and solid! open a issue to propose your contribution once issue is granted fork this repository edit your contribution start a pull request","title":"Add / modify / fix code"},{"location":"api/","text":"Tyf Bibliography Tiff 6.0 spec GeoTiFF 1.8.1 spec JPEG FIF 1.02 spec XMP spec >>> import Tyf TiffFile Objects class TiffFile(list) This class is is a list of all Image File Directories defining the TIFF file. Arguments : fileobj IO[AnyStr] - a python file object. >>> tif = Tyf.open(\"test/CEA.tif\") >>> tif[0][\"BitsPerSample\"] <IFD tag BitsPerSample:8> >>> tif[0][\"ModelTiepointTag\"].value (0.0, 0.0, 0.0, -28493.166784412522, 4255884.5438021915, 0.0) >>> tr = tif[0].getModelTransformation() >>> tr(0, 0) (-28493.166784412522, 4255884.5438021915, 0.0, 1.0) >>> tr(tif[0][\"ImageWidth\"], tif[0][\"ImageLength\"]) (2358.211624949061, 4224973.143255847, 0.0, 1.0) gkd shortcut to geokey directories raster_loaded True if raster data loaded save def save(f: Union[str, IO[AnyStr]], byteorder: str = \"<\", idx: int = None, ifd1: ifd.Ifd = None) -> None Save object into a buffer. Arguments : f str|IO[AnyStr] - a valid file path or a python file object byteorder string - \">\" if big-endian used else \"<\" idx int - IFD index to save ifd1 ifd.Ifd - IFD to be used as thumbnail (only needed with JPEG saving) JpegFile Objects class JpegFile(list) List of JPEG segment tuple (marker, segment) defining the JPEG file. Tyf manage to extract xmp data as python ElementTree object and EXIF data as IFD. ifd0 is a shortcut to JPEF Exif, ifd1 is a shortcut to JPEG Thumbnail and xmp is a shortcut to XMP data. Arguments : fileobj IO[AnyStr] - a python file object. >>> jpg = Tyf.open(\"test/IMG_20150730_210115.jpg\") >>> jpg.ifd0[\"GPS IFD\"] <IFD tag GPS IFD:794> >>> jpg.ifd0.get_location() (5.1872093, 51.2095416, 0.0) >>> jpg.xmp <Element '{adobe:ns:meta/}xmpmeta' at 0x000001CA40C7C4A0> ifd0 @property def ifd0(obj) Shortcut to JPEG EXIF data. ifd1 @property def ifd1(obj) Shortcut to JPEG thumbnail. xmp @property def xmp(obj) Shortcut to XMP attribute. __getitem__ def __getitem__(item: Union[int, str]) -> ifd.Tag Arguments : item int|str - tag number or key. Returns : ifd.Tag - ifd.Tag instance from ifd0 . >>> jpg[\"GPSLongitude\"] <IFD tag GPSLongitude:5.1872093> get def get(item: Union[int, str], default=None) -> ifd.Tag Arguments : item int|str - tag number or key. Returns : ifd.Tag - ifd.Tag instance from ifd1 . >>> jpg.get(\"ImageWidth\") <IFD tag ImageWidth:320> set_xmp def set_xmp(tag: str, value: str, **attributes) -> ET.SubElement Set xmp tag value. Custom namespace can be used. Arguments : tag str - tag. value str - tag value. **attributes - all elements to be set using attributes arg on xml.etree.ElementTree.Element creation. Returns : xml.etree.ElementTree.Element - tag element. get_xmp def get_xmp(tag: str, ns: str = \"EXIF\") -> ET.Element Get xmp tag value. Custom namespace can be used. Arguments : tag str - tag name. ns url - xml namespace url (default value is http://ns.adobe.com/exif/1.0/ ). Returns : xml.etree.ElementTree.Element - tag element. save def save(f: Union[str, IO[AnyStr]]) -> None Save object as a JPEG file. All segmet are writed in current order, only ifd0 , ifd1 and xmp are recomputed. Arguments : f str|IO[AnyStr] - a valid file path or a python file object save_thumbnail def save_thumbnail(f: Union[str, IO[AnyStr]]) -> None Save JPEG thumbnail in a separated TIFF or JPEG file, file extention automatically appended. Arguments : f str|IO[AnyStr] - a valid file path or a python file object dump_exif def dump_exif(f: Union[str, IO[AnyStr]]) -> None Save EXIF data in a separated file. If f is a file object, it is not closed. Arguments : f buffer or string - a valid file path or a python file object open def open(f: Union[str, IO[AnyStr]]) -> Union[TiffFile, JpegFile] Return JpegFile or TiffFile instance according to argument. Arguments : f str|IO[AnyStr] - a valid file path or a python file object. Returns : Tyf.JpegFile|Tyf.TiffFile - JPEG or TIFF instance. Raises : InvalidFileError - if file is neither a JPEG nor a TIFF file.","title":"API"},{"location":"api/#tyf","text":"Bibliography Tiff 6.0 spec GeoTiFF 1.8.1 spec JPEG FIF 1.02 spec XMP spec >>> import Tyf","title":"Tyf"},{"location":"api/#tifffile-objects","text":"class TiffFile(list) This class is is a list of all Image File Directories defining the TIFF file. Arguments : fileobj IO[AnyStr] - a python file object. >>> tif = Tyf.open(\"test/CEA.tif\") >>> tif[0][\"BitsPerSample\"] <IFD tag BitsPerSample:8> >>> tif[0][\"ModelTiepointTag\"].value (0.0, 0.0, 0.0, -28493.166784412522, 4255884.5438021915, 0.0) >>> tr = tif[0].getModelTransformation() >>> tr(0, 0) (-28493.166784412522, 4255884.5438021915, 0.0, 1.0) >>> tr(tif[0][\"ImageWidth\"], tif[0][\"ImageLength\"]) (2358.211624949061, 4224973.143255847, 0.0, 1.0)","title":"TiffFile Objects"},{"location":"api/#gkd","text":"shortcut to geokey directories","title":"gkd"},{"location":"api/#raster_loaded","text":"True if raster data loaded","title":"raster_loaded"},{"location":"api/#save","text":"def save(f: Union[str, IO[AnyStr]], byteorder: str = \"<\", idx: int = None, ifd1: ifd.Ifd = None) -> None Save object into a buffer. Arguments : f str|IO[AnyStr] - a valid file path or a python file object byteorder string - \">\" if big-endian used else \"<\" idx int - IFD index to save ifd1 ifd.Ifd - IFD to be used as thumbnail (only needed with JPEG saving)","title":"save"},{"location":"api/#jpegfile-objects","text":"class JpegFile(list) List of JPEG segment tuple (marker, segment) defining the JPEG file. Tyf manage to extract xmp data as python ElementTree object and EXIF data as IFD. ifd0 is a shortcut to JPEF Exif, ifd1 is a shortcut to JPEG Thumbnail and xmp is a shortcut to XMP data. Arguments : fileobj IO[AnyStr] - a python file object. >>> jpg = Tyf.open(\"test/IMG_20150730_210115.jpg\") >>> jpg.ifd0[\"GPS IFD\"] <IFD tag GPS IFD:794> >>> jpg.ifd0.get_location() (5.1872093, 51.2095416, 0.0) >>> jpg.xmp <Element '{adobe:ns:meta/}xmpmeta' at 0x000001CA40C7C4A0>","title":"JpegFile Objects"},{"location":"api/#ifd0","text":"@property def ifd0(obj) Shortcut to JPEG EXIF data.","title":"ifd0"},{"location":"api/#ifd1","text":"@property def ifd1(obj) Shortcut to JPEG thumbnail.","title":"ifd1"},{"location":"api/#xmp","text":"@property def xmp(obj) Shortcut to XMP attribute.","title":"xmp"},{"location":"api/#__getitem__","text":"def __getitem__(item: Union[int, str]) -> ifd.Tag Arguments : item int|str - tag number or key. Returns : ifd.Tag - ifd.Tag instance from ifd0 . >>> jpg[\"GPSLongitude\"] <IFD tag GPSLongitude:5.1872093>","title":"__getitem__"},{"location":"api/#get","text":"def get(item: Union[int, str], default=None) -> ifd.Tag Arguments : item int|str - tag number or key. Returns : ifd.Tag - ifd.Tag instance from ifd1 . >>> jpg.get(\"ImageWidth\") <IFD tag ImageWidth:320>","title":"get"},{"location":"api/#set_xmp","text":"def set_xmp(tag: str, value: str, **attributes) -> ET.SubElement Set xmp tag value. Custom namespace can be used. Arguments : tag str - tag. value str - tag value. **attributes - all elements to be set using attributes arg on xml.etree.ElementTree.Element creation. Returns : xml.etree.ElementTree.Element - tag element.","title":"set_xmp"},{"location":"api/#get_xmp","text":"def get_xmp(tag: str, ns: str = \"EXIF\") -> ET.Element Get xmp tag value. Custom namespace can be used. Arguments : tag str - tag name. ns url - xml namespace url (default value is http://ns.adobe.com/exif/1.0/ ). Returns : xml.etree.ElementTree.Element - tag element.","title":"get_xmp"},{"location":"api/#save_1","text":"def save(f: Union[str, IO[AnyStr]]) -> None Save object as a JPEG file. All segmet are writed in current order, only ifd0 , ifd1 and xmp are recomputed. Arguments : f str|IO[AnyStr] - a valid file path or a python file object","title":"save"},{"location":"api/#save_thumbnail","text":"def save_thumbnail(f: Union[str, IO[AnyStr]]) -> None Save JPEG thumbnail in a separated TIFF or JPEG file, file extention automatically appended. Arguments : f str|IO[AnyStr] - a valid file path or a python file object","title":"save_thumbnail"},{"location":"api/#dump_exif","text":"def dump_exif(f: Union[str, IO[AnyStr]]) -> None Save EXIF data in a separated file. If f is a file object, it is not closed. Arguments : f buffer or string - a valid file path or a python file object","title":"dump_exif"},{"location":"api/#open","text":"def open(f: Union[str, IO[AnyStr]]) -> Union[TiffFile, JpegFile] Return JpegFile or TiffFile instance according to argument. Arguments : f str|IO[AnyStr] - a valid file path or a python file object. Returns : Tyf.JpegFile|Tyf.TiffFile - JPEG or TIFF instance. Raises : InvalidFileError - if file is neither a JPEG nor a TIFF file.","title":"open"},{"location":"core/","text":"Tyf.ifd GeoKeyModel Mapping of named tuple to be used with geotiff ModelPixelScaleTag , ModelTiepointTag and ModelTransformationTag . >>> import tyf >>> from Tyf import ifd >>> tif = Tyf.open(\"test/CEA.tif\") >>> ifd.GeoKeyModel[\"ModelTiepointTag\"](*tif[0].tiepoints[0]) ModelTiepoint(I=0.0, J=0.0, K=0.0, X=-28493.1667844, Y=4255884.54380, Z=0.0) >>> ifd.GeoKeyModel[\"ModelPixelScaleTag\"](*tif[0][\"ModelPixelScaleTag\"]) ModelPixelScale(ScaleX=60.022136983193, ScaleY=60.022136983193, ScaleZ=0.0) Transform def Transform(obj, x=0., y=0., z=0.) Transformation between raster and model space using a model transformation matrix applied to raster coordinates plus altitude. >>> mps = ifd.GeoKeyModel[\"ModelPixelScaleTag\"] >>> mtt = ifd.GeoKeyModel[\"ModelTiepointTag\"] >>> Sx, Sy, Sz = mps(*tif[0][\"ModelPixelScaleTag\"]) >>> I, J, K, X, Y, Z = mtt(*tif[0].tiepoints[0]) >>> matrix = ifd.GeoKeyModel[\"ModelTransformationTag\"]( ... Sx, 0., 0., X - I * Sx, ... 0., -Sy, 0., Y + J * Sy, ... 0., 0., Sz, Z - K * Sz, ... 0., 0., 0., 1. ... ) >>> ifd.Transform(matrix, 10, 10) (-27892.945414580587, 4255284.32243236, 0.0) Arguments : obj GeoKeyModel[\"ModelTransformationTag\"] - transformation matrix. x float - pixel column index from left. y float - pixel row index from top. z float - altitude value. Returns : tuple - projeted coordinates X, Y, Z. Tag Objects class Tag(object) Encode and decode on the fly the _v attribute (see Tyf.encoders and Tyf.decoders modules). >>> tag = ifd.Tag(\"GPSLongitude\") >>> tag.value = 5.62347 >>> tag._v (5, 1, 37, 1, 6123, 250) # 5/1 deg + 37/1 min + 6123/250 sec >>> tag.value 5.62347 info Meaning of tag value if any (see Tyf.values module). >>> ifd.Tag(\"PhotometricInterpretation\", value=3).info 'RGB Palette' >>> ifd.Tag(\"Flash\", value=0x000F).info 'Flash fired, compulsory flash mode, return light detected' __init__ def __init__(tag_or_key, value=None) Arguments : tag_or_key int or string - tag value or keyword. value any - value of the tag. If None is given, it is set to default value if anyone is defined. read @staticmethod def read(fileobj, byteorder) Extract an IFD tag from buffer current position. Buffer position is adjusted to the end of IFD entry before returning the value. Arguments : fileobj buffer - a python file object. byteorder string - \">\" if big-endian used else \"<\" . Returns : Tyf.ifd.Tag - tag instance. calcsize def calcsize() Return tag value size in bytes when packed. pack def pack(byteorder) Return a tuple containing packed IFD base entry [tag, type, count], packed value and the info if value have to be written in IFD entry or data. >>> ttc, val, ofs = ifd.Tag(\"GPSLongitude\", value=5.62347).pack(\">\") >>> ttc.hex() '0004000500000003' >>> val.hex() '00000005000000010000002500000001000017eb000000fa' >>> # 5, 1, 37, 1, 6123, 250 >>> # 5/1 deg + 37/1 min + 6123/250 sec >>> ofs True Arguments : byteorder string - \">\" if big-endian used else \"<\" . Returns : tuple - packed ifd entry, packed value, is offset boolean Ifd Objects class Ifd(dict) Provide a very similar python dict interface to create and store IFD tags with automatic sub IFD management. exfT , gpsT and itrT are Tyf.ifd.Ifd attributes (sub IFD) for Exif, GPS and Interoperability tags. >>> i = ifd.Ifd() >>> i[\"GPSLongitude\"] = 5.62347 # --> GPS IFD >>> i[\"FlashpixVersion\"] = None # None will set default value --> Exif IFD >>> i {} >>> i.gpsT {'GPSLongitude': <IFD tag GPSLongitude:5.62347>} >>> i.exfT {'FlashpixVersion': <IFD tag FlashpixVersion:b'0100'>} >>> i.get(\"GPSLongitude\") # get method returns tag object <IFD tag GPSLongitude:5.62347> >>> i[\"GPSLongitude\"] # __getitem__ interface returns the python value 5.62347 >>> i.pop(\"FlashpixVersion\") # delete \"FlashpixVersion\" tag <IFD tag FlashpixVersion:b'0100'> >>> hasattr(i, \"exfT\") # empty exfT sub IFD attribute removed False raster_loaded True if raster is loaded tiepoints Geotiff tiepoint list tags def tags() Return iterator over all IFD values including sub IFD ones in the order: exfT - gpsT - itrT . set_location def set_location(lon, lat, alt=0.) Set GPS IFD tags according to given longitude, latitude and altitude. If no GPS IFD exists, it is created according to version (2, 2, 0, 0) . >>> i = ifd.Ifd() >>> i.set_location(5.62347, 45.21345, 12) >>> for t in i: print(t) ... <IFD tag GPSVersionID:(2, 2, 0, 0)> <IFD tag GPSLatitudeRef:'N'> <IFD tag GPSLatitude:45.21345> <IFD tag GPSLongitudeRef:'E'> <IFD tag GPSLongitude:5.62347> <IFD tag GPSAltitudeRef:0 - Above sea level> <IFD tag GPSAltitude:12.0> Arguments : lon float - longitude in decimal degrees lat float - latitude in decimal degrees alt float - altitude in meters get_location def get_location() >>> i = ifd.Ifd() >>> i.get_location() Traceback (most recent call last): File \"<stdin>\", line 1, in <module> File \"X:/path/to/Tyf/ifd.py\", line 568, in get_location raise Exception(\"No location data found\") Exception: No location data found >>> i.set_location(5.62347, 45.21345, 12) >>> i.get_location() (5.62347, 45.21345, 12.0) Returns : tuple - longitude, latitude and altitude. Raises : Exception - if no GPS IFD found. url_load_location def url_load_location(url, **kwargs) Return a static map image data from map provider. >>> from Tyf import ifd >>> i = ifd.Ifd() >>> i.set_location(5.62347, 45.21345, 12) >>> # below a mapbox-static-map url centered on [lon, lat] with a red >>> # pin, width, height and zoom to be specified on call >>> url = \"https://api.mapbox.com/styles/v1/mapbox/outdoors-v11/static\" ... \"/pin-s+f74e4e(%(lon)f,%(lat)f)/%(lon)f,%(lat)f,%(zoom)d,0\" ... \"/%(width)dx%(height)d?access_token=%(token)s\" >>> data = i.url_load_location( ... url, zoom=15, width=600, height=400, token=\"xx-xxxxxx-xx\" ... ) >>> with io.open(\"dump.png\", \"wb\") as f: ... f.write(data) Arguments : url str - map provider url containing %(lon)f and %(lat)f format expression to be replaced by longitude and latitude found in GPS data. **kwargs dict - key-value pairs to match entries in url according to python string formatting. Returns : bytes|str - Image data. dump_location def dump_location(name, url, **kwargs) Dump a static map image from map provider into filesystem. Arguments : name str - a valid filepath. url str - map provider url containing %(lon)f and %(lat)f format expression to be replaced by longitude and latitude found in GPS data. **kwargs dict - key-value pairs to match entries in url according to python string formatting.","title":"Core"},{"location":"core/#tyfifd","text":"","title":"Tyf.ifd"},{"location":"core/#geokeymodel","text":"Mapping of named tuple to be used with geotiff ModelPixelScaleTag , ModelTiepointTag and ModelTransformationTag . >>> import tyf >>> from Tyf import ifd >>> tif = Tyf.open(\"test/CEA.tif\") >>> ifd.GeoKeyModel[\"ModelTiepointTag\"](*tif[0].tiepoints[0]) ModelTiepoint(I=0.0, J=0.0, K=0.0, X=-28493.1667844, Y=4255884.54380, Z=0.0) >>> ifd.GeoKeyModel[\"ModelPixelScaleTag\"](*tif[0][\"ModelPixelScaleTag\"]) ModelPixelScale(ScaleX=60.022136983193, ScaleY=60.022136983193, ScaleZ=0.0)","title":"GeoKeyModel"},{"location":"core/#transform","text":"def Transform(obj, x=0., y=0., z=0.) Transformation between raster and model space using a model transformation matrix applied to raster coordinates plus altitude. >>> mps = ifd.GeoKeyModel[\"ModelPixelScaleTag\"] >>> mtt = ifd.GeoKeyModel[\"ModelTiepointTag\"] >>> Sx, Sy, Sz = mps(*tif[0][\"ModelPixelScaleTag\"]) >>> I, J, K, X, Y, Z = mtt(*tif[0].tiepoints[0]) >>> matrix = ifd.GeoKeyModel[\"ModelTransformationTag\"]( ... Sx, 0., 0., X - I * Sx, ... 0., -Sy, 0., Y + J * Sy, ... 0., 0., Sz, Z - K * Sz, ... 0., 0., 0., 1. ... ) >>> ifd.Transform(matrix, 10, 10) (-27892.945414580587, 4255284.32243236, 0.0) Arguments : obj GeoKeyModel[\"ModelTransformationTag\"] - transformation matrix. x float - pixel column index from left. y float - pixel row index from top. z float - altitude value. Returns : tuple - projeted coordinates X, Y, Z.","title":"Transform"},{"location":"core/#tag-objects","text":"class Tag(object) Encode and decode on the fly the _v attribute (see Tyf.encoders and Tyf.decoders modules). >>> tag = ifd.Tag(\"GPSLongitude\") >>> tag.value = 5.62347 >>> tag._v (5, 1, 37, 1, 6123, 250) # 5/1 deg + 37/1 min + 6123/250 sec >>> tag.value 5.62347","title":"Tag Objects"},{"location":"core/#info","text":"Meaning of tag value if any (see Tyf.values module). >>> ifd.Tag(\"PhotometricInterpretation\", value=3).info 'RGB Palette' >>> ifd.Tag(\"Flash\", value=0x000F).info 'Flash fired, compulsory flash mode, return light detected'","title":"info"},{"location":"core/#__init__","text":"def __init__(tag_or_key, value=None) Arguments : tag_or_key int or string - tag value or keyword. value any - value of the tag. If None is given, it is set to default value if anyone is defined.","title":"__init__"},{"location":"core/#read","text":"@staticmethod def read(fileobj, byteorder) Extract an IFD tag from buffer current position. Buffer position is adjusted to the end of IFD entry before returning the value. Arguments : fileobj buffer - a python file object. byteorder string - \">\" if big-endian used else \"<\" . Returns : Tyf.ifd.Tag - tag instance.","title":"read"},{"location":"core/#calcsize","text":"def calcsize() Return tag value size in bytes when packed.","title":"calcsize"},{"location":"core/#pack","text":"def pack(byteorder) Return a tuple containing packed IFD base entry [tag, type, count], packed value and the info if value have to be written in IFD entry or data. >>> ttc, val, ofs = ifd.Tag(\"GPSLongitude\", value=5.62347).pack(\">\") >>> ttc.hex() '0004000500000003' >>> val.hex() '00000005000000010000002500000001000017eb000000fa' >>> # 5, 1, 37, 1, 6123, 250 >>> # 5/1 deg + 37/1 min + 6123/250 sec >>> ofs True Arguments : byteorder string - \">\" if big-endian used else \"<\" . Returns : tuple - packed ifd entry, packed value, is offset boolean","title":"pack"},{"location":"core/#ifd-objects","text":"class Ifd(dict) Provide a very similar python dict interface to create and store IFD tags with automatic sub IFD management. exfT , gpsT and itrT are Tyf.ifd.Ifd attributes (sub IFD) for Exif, GPS and Interoperability tags. >>> i = ifd.Ifd() >>> i[\"GPSLongitude\"] = 5.62347 # --> GPS IFD >>> i[\"FlashpixVersion\"] = None # None will set default value --> Exif IFD >>> i {} >>> i.gpsT {'GPSLongitude': <IFD tag GPSLongitude:5.62347>} >>> i.exfT {'FlashpixVersion': <IFD tag FlashpixVersion:b'0100'>} >>> i.get(\"GPSLongitude\") # get method returns tag object <IFD tag GPSLongitude:5.62347> >>> i[\"GPSLongitude\"] # __getitem__ interface returns the python value 5.62347 >>> i.pop(\"FlashpixVersion\") # delete \"FlashpixVersion\" tag <IFD tag FlashpixVersion:b'0100'> >>> hasattr(i, \"exfT\") # empty exfT sub IFD attribute removed False","title":"Ifd Objects"},{"location":"core/#raster_loaded","text":"True if raster is loaded","title":"raster_loaded"},{"location":"core/#tiepoints","text":"Geotiff tiepoint list","title":"tiepoints"},{"location":"core/#tags","text":"def tags() Return iterator over all IFD values including sub IFD ones in the order: exfT - gpsT - itrT .","title":"tags"},{"location":"core/#set_location","text":"def set_location(lon, lat, alt=0.) Set GPS IFD tags according to given longitude, latitude and altitude. If no GPS IFD exists, it is created according to version (2, 2, 0, 0) . >>> i = ifd.Ifd() >>> i.set_location(5.62347, 45.21345, 12) >>> for t in i: print(t) ... <IFD tag GPSVersionID:(2, 2, 0, 0)> <IFD tag GPSLatitudeRef:'N'> <IFD tag GPSLatitude:45.21345> <IFD tag GPSLongitudeRef:'E'> <IFD tag GPSLongitude:5.62347> <IFD tag GPSAltitudeRef:0 - Above sea level> <IFD tag GPSAltitude:12.0> Arguments : lon float - longitude in decimal degrees lat float - latitude in decimal degrees alt float - altitude in meters","title":"set_location"},{"location":"core/#get_location","text":"def get_location() >>> i = ifd.Ifd() >>> i.get_location() Traceback (most recent call last): File \"<stdin>\", line 1, in <module> File \"X:/path/to/Tyf/ifd.py\", line 568, in get_location raise Exception(\"No location data found\") Exception: No location data found >>> i.set_location(5.62347, 45.21345, 12) >>> i.get_location() (5.62347, 45.21345, 12.0) Returns : tuple - longitude, latitude and altitude. Raises : Exception - if no GPS IFD found.","title":"get_location"},{"location":"core/#url_load_location","text":"def url_load_location(url, **kwargs) Return a static map image data from map provider. >>> from Tyf import ifd >>> i = ifd.Ifd() >>> i.set_location(5.62347, 45.21345, 12) >>> # below a mapbox-static-map url centered on [lon, lat] with a red >>> # pin, width, height and zoom to be specified on call >>> url = \"https://api.mapbox.com/styles/v1/mapbox/outdoors-v11/static\" ... \"/pin-s+f74e4e(%(lon)f,%(lat)f)/%(lon)f,%(lat)f,%(zoom)d,0\" ... \"/%(width)dx%(height)d?access_token=%(token)s\" >>> data = i.url_load_location( ... url, zoom=15, width=600, height=400, token=\"xx-xxxxxx-xx\" ... ) >>> with io.open(\"dump.png\", \"wb\") as f: ... f.write(data) Arguments : url str - map provider url containing %(lon)f and %(lat)f format expression to be replaced by longitude and latitude found in GPS data. **kwargs dict - key-value pairs to match entries in url according to python string formatting. Returns : bytes|str - Image data.","title":"url_load_location"},{"location":"core/#dump_location","text":"def dump_location(name, url, **kwargs) Dump a static map image from map provider into filesystem. Arguments : name str - a valid filepath. url str - map provider url containing %(lon)f and %(lat)f format expression to be replaced by longitude and latitude found in GPS data. **kwargs dict - key-value pairs to match entries in url according to python string formatting.","title":"dump_location"}]}